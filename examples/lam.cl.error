

 

Error: Expr is pure virtual; can't print self


Error: Expr is pure virtual; can't beta-reduce


Error: Expr is pure virtual; can't substitute


Error: Expr is pure virtual; can't gen_code

get_parent().
Error:  free occurrence of 


get_x()
\
.
((new Closure
).init(
new Closure))
self))
class Closure
 inherits Closure {

  apply(y : EvalObject) : EvalObject {

    { out_string("Applying closure 
\n");

      x <- y;

;}};

};

((
)@(
))
(let x : EvalObject <- 
,

     y : EvalObject <- 
 in

  case x of

    c : Closure => c.apply(y);

    o : Object => { abort(); new EvalObject; };

  esac)
x
x
y
x
y
z
beta-reduce: 
 =>



class EvalObject inherits IO {

  eval() : EvalObject { { abort(); self; } };

};

class Closure inherits EvalObject {

  parent : Closure;

  x : EvalObject;

  get_parent() : Closure { parent };

  get_x() : EvalObject { x };

  init(p : Closure) : Closure {{ parent <- p; self; }};

  apply(y : EvalObject) : EvalObject { { abort(); self; } };

};

Generating code for 

------------------cut here------------------

(*Generated by lam.cl (Jeff Foster, March 2000)*)

class Main {

  main() : EvalObject {


};
};


------------------cut here------------------







